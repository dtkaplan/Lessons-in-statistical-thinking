# Data frames {#sec-data-frames}

```{r include=FALSE}
source("../_startup.R")
set_chapter(1)
```

The origin of recorded history is, literally, data. Five-thousand years ago, in Mesopotamia, the climate was changing. Retreating sources of irrigation water called for an organized and coordinated response, beyond the scope of isolated clans of farmers. To provide this response, a new social structure -- government -- was established and grew. Taxes were owed and paid, each transaction recorded. Food grain had to be measured and stored, livestock counted, trades and shipments memorialized. 

Writing emerged as the technological innovation to keep track of all this. We know this today because memoranda were incised by stylus on soft clay tablets and baked into permanence. When the records were no longer needed, they were recycled as building materials for the growing settlements and cities. Archaeologists started uncovering these tablets more than 100 years ago, spending decades to decipher the meaning of the stylus marks in clay.

The writing and record-keeping technology developed over time: knots in string, wax tablets, papyrus, vellum, paper, and computer memory. Making sense of the records has always required *literacy*, deciphering marks according to the system and language used to represent the writer's intent. Today, in many societies, the vast majority of people have been taught to read and write their native language according to the accepted conventions. 

Conventions of record keeping diverge from those of everyday language. For instance, financial transaction records must be guarded against error and fraud. Starting in the thirteenth century, financial accountants adopted a practice---double-entry bookkeeping---that has no counterpart in everyday language. ["[Double-entry bookkeeping](https://en.wikipedia.org/wiki/Double-entry_bookkeeping)," records *twice* in two different places, in the form of a credit to an account and a debit from another account.]{.aside} 

Modern conventions make working with data more accessible and more reliable. Of primary interest to us in these *Lessons* is the organization provided by a "**data frame**," a structure for holding data as exemplified in @fig-data-frame-schematic. 

::: {#fig-data-frame-schematic}
---
fig-cap-location: margin
---

```{r echo=FALSE}
# knitr::include_graphics("www/data-frame-schematic.png")
```

![](www/data-frame-schematic.png)

A data frame organizes observed facts into rows and columns. Each column is a **variable**. Each row is a **specimen**. Here, there are four variables and five specimens. --- The display in @fig-data-frame-schematic shows a small part of a larger data frame holding observations collected by statistician Francis Galton in the 1880s. I will use this data frame repeatedly across these lessons because of the outsized historical role the data played in the development of statistical methodology. The context for the data collection was Galton's attempt to quantify the heritability of biological traits. The particular trait of interest to Galton (probably because it is easily measured) is human stature. Galton recorded the heights of full-grown children and their parents.
:::

The word "variable" is appropriate. The values in a variable **vary** from one from one row to another. Other English words with the same root include "variation," "variety," and even "diversity." 

The row-and-column organization of a data frame is reminiscent of a spreadsheet. However, data frames have additional organizational requirements that typical spreadsheet software does not enforce. The term "**tidy data**" emphasizes that these requirements are being met.

1. Each variable must consist of the same kind of individual entries. For example, the `mother` variable consists of numbers: a quantity. In this case, the quantity is the mother's height in inches. It would not be legitimate for an entry in `mother` to be a word or to be a height in meters or something else entirely, for instance, a blood pressure.

2. Each row represents an individual real-world entity. For the data frame shown in @fig-data-frame-schematic, each row corresponds to an individual, fully-grown child. We use the term "**unit of observation**" to refer to the *kind of entity* represented in each row. All rows in a data frame must be the same kind of unit of observation. It would not be legitimate for some rows to individual people while others refer to something different such as a house or family or country. If you wanted to record data on families, you would need to create a new data frame where the unit of observation is a family.

We use the word "**specimen**" to refer to an individual instance of the unit of observation. A data frame is a collection of specimens. Each row represents a unique specimen.

The unit of observation in @fig-data-frame-schematic is a full-grown child. The fifth row in that data frame refers to a unique young woman in London in the 1880s (whose name is lost to history). By using the word "specimen" to refer to this woman, we do not mean to dehumanize her. However, we need a phrase that can be applied to a single row of any data frame, whatever its unit of observation might be: a shipping container, a blood sample, a day of ticket sales, and so on.

The collection of specimens comprised by a data frame is often a "**sample**" from a larger group of the units of observation. Galton did not measure the height of every fully-grown child in London, England, the UK, or the World. He collected a *sample* from London families. Sometimes, a data frame includes every possible instance of the unit of observation. For example, a library catalog lists comprehensively the books in a library. Such a comprehensive collection is called a "**census**."

::: {.callout-note}
## Example: New-born babies

The US Centers for Disease Control (CDC) publishes a "public use file" each year, a data frame where the unit of observation is an infant born in the US. The many variables include the baby's weight and sex, the mother's age, and the number of prenatal care visits during the pregnancy. The published file for 2022 contains 3,699,040 rows; that is the number of (known) births in 2022. As such, the CDC data constitutes a **census** rather than a **sample**.

For demonstration purposes, these Lessons make available a random *sample* of size 20,000 of the CDC public-use file. The data frame containing the sample is named `Births2022`. 
:::

## Computing with R

The computer is the essential tool for working with data. Traditionally, mathematics education has emphasized carrying out procedures with paper and pencil, or perhaps a calculator. Many statistics textbooks have inherited this tradition. This has a very unhappy consequence: the methods and concepts in those books are mainly limited to those developed *before* computers became available. This rules out using or understanding many of the concepts and techniques that form the basis for modern applied statistics. For example, news reports about medical research often include phrases like "after adjusting for ..." or use techniques such as "logistic regression" or other machine-learning approaches. Traditional beginning statistics text are silent about such things. 

There are many software packages for data and statistical computing. These *Lessons* use one of the most popular and powerful statistics software systems: R, a free, open-source system that is used by millions of people in many diverse disciplines and workplaces. It is also highly regarded in business, industry, science, and government. Fortunately, you do not have to learn the R language; you need only a couple dozen R expressions to work through all these *Lessons*.

To help to make getting started with R as simple as possible, *Lessons* provides interactive R computing *directly in the text*. This takes the form of R "chunks" that display one or more R commands in an editable box. When you press "Run Code" in a chunk, the command is evaluated by R and the results of the command displayed. 

We will mostly be working with data frames that have already been uploaded to R and can be accessed by name. For instance, we mentioned above the `Births2022` data frame.

Here's a basic R command that displays the first rows of a data frame. Such a display can be useful to orient yourself to how the data frame is arranged. Let's do this for `Births2022`:

::: {.column-page-right}
```{webr-r}
Births2022 |> head()
```
:::

Since there are 38 variables and 20,000 rows in `Births2022`, the output from `Births2022 |> head()` is truncated to fit reasonably on the page. 

Other commands in these *Lessons* will have the same general layout as the one above. For instance, 

- How many rows in a data frame?
```{webr-r}
Births2022 |> nrow()
```

- What are the names of the variables?
```{webr-r}
Births2022 |> names()
```

These commands each consist of three elements:

1. The name of a data frame at the start of the command.
2. The name of an action to perform followed immediately by parentheses. 
3. In between (1) and (2) is some punctuation: `|>`. The shape of the punctuation reflects its purpose: the data frame on the left is being *sent as an input to* the task named on the right.





## Types of variables

Every variable in a tidy data frame has a **type**. The two most common types---and really, the only two types we need to work with--- are **quantitative** and **categorical**.

1. **Quantitative** variables record an "amount" of something. These might just as well be called "numerical" variables. 

2. **Categorical** variables typically consist of letters. For instance, the `sex` variable in @fig-data-frame-schematic contains entries that are either **F** or **M**. In most of the data we work with in these *Lessons*, there is a fixed set of entry values called the **levels** of the categorical variable. The levels of `sex` are **F** and **M**.

To illustrate, the following command selects five of the 38 variables for display. Even though you won't encounter such **data wrangling** until Lesson [-@sec-wrangling], you may be able to make sense of the command. (If not, don't worry!)

```{webr-r}
Births2022 |> 
  select(mage, meduc, duration, weight, anesthesia) |> 
  head()
```

You can see that `mage`, `duration`, and `weight` are numerical. In contrast, `meduc` and `anesthesia` are categorical.


## The codebook {#sec-codebook}

How are you to know for any given data frame what constitutes the unit of observation or what each variable is about? For instance, in `Births2022` there are variables `duration` and `weight`. The duration of what? The weight of what? This information, sometimes called **metadata**, is stored outside the data frame. Often, the metadata is contained in a separate documentation file called a "**codebook**."

To start, the codebook should make clear what is the unit of observation for the data frame. For instance, we described the unit of observation for the data frame shown in @fig-data-frame-schematic as a fully grown child. This detail is important. For instance, each such child---each specimen---can appear only once in the data frame. In contrast, the same `mother` and `father` might appear for multiple specimens, namely, the siblings of the child.

In the `Births2020` data frame, the unit of observation is a newborn baby. If a birth resulted in twins, each of the two babies will have its own row. In contrast, imagine a data frame for the birth mothers or another for prenatal care visits. Each mother could appear only once in the birth-mothers frame, but the same mother can appear multiple times in the prenatal care data frame.

For quantitative variables, the relevant metadata includes what the number refers to (e.g., mother's height `mheight` or baby's weight, `weight`) and the physical units of that quantity (e.g., inches for `mheight` or grams for `weight`). 

For categorical variables, the metadata should describe the meaning of each level in as much detail as necessary.

::: {.callout-note .column-page-right}
## Example (cont.): CDC births codebook

The codebook for the original CDC data is a PDF document entitled "User Guide to the 2022 Natality Public Use File." You can access it on the [CDC website](https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Dataset_Documentation/DVS/natality/UserGuide2022.pdf). The sample `Births2022` has more compact documentation. You can see the documentation of most any R data frame by using `?` followed by the name of the data frame. 

```{webr-r}
?Births2022
```
:::


## Enrichment topics

The preceeding text is designed to give you the essentials of data frames and how to work with them. But there is often much more to say that illuminates or extends the topics, or shows you how to perform a specialized task. These are collected at the end of each Lesson. Click on the bar to open them.

::: {.callout-note collapse="true"}
## Data frames in R packages 

Almost all the data frames used as examples or exercises in these *Lessons* are stored in files provided by R software "**packages**" such as `{LSTbook}` or `{mosaicData}`. The data frame itself is easily accessed by a simple name, e.g., `Galton`. The location of the data frame is specified by the package name as a prefix followed by a pair of colons, e.g. `mosaicData::Galton`. A convenient feature of this system is the easy access to documentation by giving a command consisting of a question mark followed by the *package-name*::*data-frame-name*. 

:::

::: {.callout-note collapse="true"}
## "Tables" versus "data frames"

You may notice that the displays of data frames printed in this book are given labels such as @tbl-galton-dataframe. It is natural to wonder why the word "table" is used sometimes and "data frame" other times.  

In these *Lessons* we make the following distinction. A "data frame" stores values in the strict format of rows and columns described previously. Data frames are "machine readable." 

The data scientist working with data frames often seeks to create a **display** intended for human eyes. A "table" is one kind of **display** for humans. Since humans have common sense and have learned many ways to communicate with other humans, a table does not have to follow the restrictions placed on data frames. Tables are not necessarily organized in strict row-column format, can include units for numerical quantities and comments. An example is the table put together by Francis Galton (@fig-galton-notebook) to organize his measurements of heights. 

```{r echo=FALSE}
#| label: fig-galton-notebook
#| fig-cap: "An excerpt from Francis Galton's notebook recording the heights of parents and children in London in the 1880s."
#| fig-cap-location: margin
knitr::include_graphics("www/galton-notebook-excerpt.png")
```

We make the distinction between a data frame (for data storage) and a table (for communicating with humans) because many of the operations discussed in later lessons serve the purpose of transforming data frames into human-facing displays such as graphics (Lesson [-@sec-point_plots]) or tables (@sec-displaying-tables.)  
:::

::: {.callout-note collapse="true"}
## RStudio

As you get started with R, the interactive R chunks embedded in the text will suffice. On the other hand, many people prefer to use a more powerful interface, called **RStudio**, that allows you to edit and save files, and provides a host of other services.

There are several ways to access RStudio. For instance, it can be installed on a laptop. (Instructions for doing this are available. Use a web search to find them.) It can also be provided by a web "server." Many colleges, universities, and other organizations have set up such servers. If you are taking a course or working in a job, your instructor or boss can tell you how to connect to such a server. 

One of the nicest RStudio services is provided by `posit.cloud`, a "freemium" web service. The word "freemium" signals that you can use it for free, up to a point. Fortunately, that point will suffice for you to follow all of these *Lessons*.

1. In your browser, follow [this link](https://posit.cloud/content/6532153). This will take you to `posit.cloud` and, after asking you to login via Google or to set up an account, will bring you to a page that will look much like the following. (It may take a few minutes.)

![](www/posit-cloud.png)

2. On the left half of the window, there are three "tabs" labelled "Console," "Terminal," and "Background Jobs." You will be working in the "Console" tab. Click in that tab and you will see a flashing `|` cursor after the `>` sign.

Each time you open RStudio, load the `{LSTbook}` package using this **command** at the prompt in the "console" tab.

```{r eval=FALSE}
library(LSTbook)
```

All the R commands used in this book work exactly the same way in the embedded R chunks or in RStudio.
:::



::: {.callout-note collapse="true"}
## Special topic: more variable types
We are not doing full justice to the variety of possible variable types by focusing on just two type: quantitative and categorical. You should be aware that there are other kinds, for example, photographs or dates.
:::
